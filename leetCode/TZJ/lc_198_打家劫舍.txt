class Solution {
    public int rob(int[] nums) {
        int n = nums.length;
        int temp1 = 0, temp2 = 0;
        int max = 0;
        // dp数组，dp[i]表示若第i个house是被劫的最后一个（且第i个house必定被劫），那么所能劫到的最高金额。
        int[] dp = new int[n];
        if (n == 0) return 0;
        if (n == 1) return nums[0];
        if (n == 2) return (nums[1] > nums[0]) ? nums[1] : nums[0];
        dp[0] = nums[0];
        dp[1] = nums[1];
        dp[2] = nums[0] + nums[2];
        max = (dp[1] > dp[2]) ? dp[1] : dp[2];
        for (int i = 3; i < n; i++) {
            // 在已知第i个house被劫的情况下，上一个被劫的house要么是i - 2，要么是i - 3.
            temp1 = nums[i] + dp[i - 2];
            temp2 = nums[i] + dp[i - 3];            
            dp[i] = (temp1 > temp2) ? temp1 : temp2;
            // 保存到目前为止所能劫到的最高金额。
            max = (dp[i] > max) ? dp[i] : max;
        }
        return max;
    }
}