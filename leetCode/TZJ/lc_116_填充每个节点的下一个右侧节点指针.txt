/*
// Definition for a Node.
class Node {
    public int val;
    public Node left;
    public Node right;
    public Node next;

    public Node() {}

    public Node(int _val,Node _left,Node _right,Node _next) {
        val = _val;
        left = _left;
        right = _right;
        next = _next;
    }
};
*/
class Solution {
    public Node connect(Node root) {
        // if (root == null) return null;
        // if (root.left == null) return root;
        // int count = 0;
        // int powerTwo = 2;
        // int judgeLevel = 2;
        // LinkedList<Node> bfs = new LinkedList<>();
        // bfs.add(root.left);
        // bfs.add(root.right);
        // // 初始化current
        // Node current = bfs.remove();
        // if (current.left != null) {        
        //     bfs.add(current.left);
        //     bfs.add(current.right);
        // }
        // // 利用队列，bfs遍历二叉树
        // while (!bfs.isEmpty()) {
        //     // 判断是否是当前层的最右侧节点，若是，则next保持null不变
        //     if (judgeLevel == ++count) {
        //         judgeLevel = powerTwo * 2 + judgeLevel; 
        //         powerTwo = powerTwo * 2;
        //         current = bfs.remove();
        //     } else {
        //         current.next = bfs.remove();
        //         current = current.next;
        //     }
        //     if (current.left != null) {
        //         bfs.add(current.left);
        //         bfs.add(current.right);
        //     }
        // }
        // return root;
        
        // 下面是discuss区高赞解法
        Node level_start = root;
        while(level_start != null){
            Node cur = level_start;
            while(cur != null){
                if(cur.left != null) cur.left.next = cur.right;
                if(cur.right != null && cur.next != null) cur.right.next = cur.next.left;      
                cur = cur.next;
            }
            level_start = level_start.left;
        }
        return root;
    }
}