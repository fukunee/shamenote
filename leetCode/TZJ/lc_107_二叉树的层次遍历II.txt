/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
import javafx.util.Pair;
class Solution {
    public List<List<Integer>> levelOrderBottom(TreeNode root) {
        LinkedList<List<Integer>> res = new LinkedList<>();
        if (root == null) return res;
        LinkedList<Pair<Integer, TreeNode>> temp = new LinkedList<>();
        temp.add(new Pair<>(0, root));
        while (!temp.isEmpty()) {
            Pair<Integer, TreeNode> cur = temp.remove();
            int level = cur.getKey();
            TreeNode curNode = cur.getValue();
            if (curNode.left != null)
                temp.add(new Pair<>(level + 1, curNode.left));
            if (curNode.right != null)
                temp.add(new Pair<>(level + 1, curNode.right));
            if (level < res.size()) {
                res.getFirst().add(curNode.val);
            } else {
                res.addFirst(new LinkedList<Integer>());
                res.getFirst().add(curNode.val);
            }
        }
        return res;
    }
}
// 不使用Pair的方法，挺不错的
class Solution {
    public List<List<Integer>> levelOrderBottom(TreeNode root) {
        LinkedList<List<Integer>> result = new LinkedList<>();
        if (root == null)
            return result;
        Queue<TreeNode> queue = new LinkedList<>();
        queue.add(root);
        while (!queue.isEmpty()) {
            List<Integer> oneLevel = new ArrayList<>();
            // 每次都取出一层的所有数据
            int count = queue.size();
            for (int i = 0; i < count; i++) {
                TreeNode node = queue.poll();
                oneLevel.add(node.val);
                if (node.left != null)
                    queue.add(node.left);
                if (node.right != null)
                    queue.add(node.right);
            }
            // 每次都往队头塞
            result.addFirst(oneLevel);
        }
        return result;
    }
}