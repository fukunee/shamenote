class Solution {
    // 方法一：深度优先搜索，递归
    // 线性扫描整个二维网格，如果一个结点包含 1，则以其为根结点触发深度优先搜索。
    // 在深度优先搜索过程中，每个访问过的结点被标记为 0。
    // 计数触发深度优先搜索的根结点的数量，即为岛屿的数量。
    void dfs(char[][] grid, int r, int c) {
        int nr = grid.length;
        int nc = grid[0].length;
        if (r < 0 || c < 0 || r >= nr || c >= nc || grid[r][c] == '0') return;
        grid[r][c] = '0';
        dfs(grid, r - 1, c);
        dfs(grid, r + 1, c);
        dfs(grid, r, c - 1);
        dfs(grid, r, c + 1);
    }
    public int numIslands(char[][] grid) {
        if (grid == null || grid.length == 0) return 0;
        int nr = grid.length;
        int nc = grid[0].length;
        int num_islands = 0;
        for (int r = 0; r < nr; ++r) {
          for (int c = 0; c < nc; ++c) {
            if (grid[r][c] == '1') {
              ++num_islands;
              dfs(grid, r, c);
            }
          }
        }
        return num_islands;
    }
    // 方法二:BFS，使用了迭代实现
    // 不知道为啥比递归慢不少
    // public int numIslands(char[][] grid) {
    //     if (grid == null || grid.length == 0) return 0;
    //     int nr = grid.length;
    //     int nc = grid[0].length;
    //     int num_islands = 0;
    //     for (int r = 0; r < nr; ++r) {
    //         for (int c = 0; c < nc; ++c) {
    //             if (grid[r][c] == '1') {
    //                 ++num_islands;
    //                 grid[r][c] = '0'; // mark as visited
    //                 Queue<Integer> neighbors = new LinkedList<>();
    //                 neighbors.add(r * nc + c);
    //                 while (!neighbors.isEmpty()) {
    //                     int id = neighbors.remove();
    //                     int row = id / nc;
    //                     int col = id % nc;
    //                     if (row - 1 >= 0 && grid[row-1][col] == '1') {
    //                       neighbors.add((row-1) * nc + col);
    //                       grid[row-1][col] = '0';
    //                     }
    //                     if (row + 1 < nr && grid[row+1][col] == '1') {
    //                       neighbors.add((row+1) * nc + col);
    //                       grid[row+1][col] = '0';
    //                     }
    //                     if (col - 1 >= 0 && grid[row][col-1] == '1') {
    //                       neighbors.add(row * nc + col-1);
    //                       grid[row][col-1] = '0';
    //                     }
    //                     if (col + 1 < nc && grid[row][col+1] == '1') {
    //                       neighbors.add(row * nc + col+1);
    //                       grid[row][col+1] = '0';
    //                     }
    //                 }
    //             }
    //         }
    //     }
    //     return num_islands;
    // }
}