    public boolean exist(char[][] board, String word) {
        int[][] used = new int[board.length][board[0].length];
        int curLen = 0;
        if (word.equals(""))
            return true;
        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board[0].length; j++) {
                if (board[i][j] == word.charAt(0)) {
                    used[i][j] = 1;
                    if (backtrack(board, used, word, ++curLen, i, j)) return true;
                    --curLen;
                    used[i][j] = 0;
                }
            }
        }
        return false;
    }

    public boolean backtrack(char[][] board, int[][] used, String word, int curLen, int row, int col) {
        if (curLen == word.length()) return true;
        char next = word.charAt(curLen);
        if (row > 0 && used[row - 1][col] == 0 && board[row - 1][col] == next) {
            used[row - 1][col] = 1;
            if (backtrack(board, used, word, ++curLen, row - 1, col)) return true;
            --curLen;
            used[row - 1][col] = 0;
        }
        if (row + 1 < board.length && used[row + 1][col] == 0 && board[row + 1][col] == next) {
            used[row + 1][col] = 1;
            if (backtrack(board, used, word, ++curLen, row + 1, col)) return true;
            --curLen;
            used[row + 1][col] = 0;
        }
        if (col > 0 && used[row][col - 1] == 0 && board[row][col - 1] == next) {
            used[row][col - 1] = 1;
            if (backtrack(board, used, word, ++curLen, row, col - 1)) return true;
            --curLen;
            used[row][col - 1] = 0;
        }
        if (col + 1 < board[0].length && used[row][col + 1] == 0 && board[row][col + 1] == next) {
            used[row][col + 1] = 1;
            if (backtrack(board, used, word, ++curLen, row, col + 1)) return true;
            --curLen;
            used[row][col + 1] = 0;
        }
        return false;
    }